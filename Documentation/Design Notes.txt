Multiplayer VR game in the style of Tron light cycles.
Unity transitioning from UNet to New solution, and cannot tell if the documentation is written for one or the other...

Packages
	Neon Sphere:
		https://www.youtube.com/watch?v=xD7__42EkYI&
		https://assetstore.unity.com/packages/templates/packs/neonsphere-starter-pack-free-158198#description
		
	Post Processing 2.2.2:
		I'm using 2.2.3 cause yolo.
		https://docs.unity3d.com/Packages/com.unity.postprocessing@2.3/manual/index.html
		To apply this to create neon lights watch Neon Spher youtube around 16:30
		
		Good video on setting this up: https://www.youtube.com/watch?v=Nd1pmR1afGk.  Around 8:30 mark.
		
	OpenVR Plugin
		https://github.com/ValveSoftware/unity-xr-plugin/releases/tag/installer
		Its annoying but its seperate from Unity XR plugin


Planning / Tutorials
	Networking:
		mirror: (2019 LTS) https://www.youtube.com/playlist?list=PLkx8oFug638oBYF5EOwsSS-gOVBXj1dkP
		*Custom Made: (Made for 2018, but maybe work for 2019LTS) https://www.youtube.com/playlist?list=PLXkn83W0QkfnqsK8I0RAz5AbUxfg3bOQ5
			Create your own dedicated server and have clients connect to it.  Probably the most informative solution.
			Server side collisions!
			
	Virtual Reality
		VR Tutorials: (2019)https://www.youtube.com/watch?v=gGYtahQjmWQ&t=12s 
			Tutorial 1 Completed.  Headset/basic hand support done.


Other Network Use Possibilities
	SmartFoxServer2X Multiplayer SDK
		free 100 ccus
	Photon (PUN)
	UNet: old and depricated.  Relies on unity.
	

Collisions
	2d array of booleans (has light path yes or no) matching a representation of the game world.
		Quick lookup but potentially a lot of memory usage for higher degrees of accuracy.
		Also doesnt let you know who killed you.
		Reading: https://www.gamedev.net/forums/topic/471497-collision-detection-for-a-smooth-tron/
		With booleans of size 10,000 x 10,000 = 100MB
		*Bytes are apparently the same size as bools, and can be 0->255.
		With Chars this is 200MB
		With Ints this is 400MB
		
		Testing:
			Sample Scene Size: 0,0 ->  39.4 in Unity Units

			10,000 cells means each cell is spaced 0.00394 apart.
			At the map scale of the sample scene above, it takes about ~0.1 units before I can really notice a difference.
			Assuming then that 0.05 is a good number, I would only need a 2darray of size 788x788.  Less than 1% the space needed for the 10,000x10,000 2darray Im able to do.
		
		
	Hashmap or some solution that only tracks existing path locations
		Maybe keep track of line segments created from frame to frame.
			These would still need a quick search for collisions.
			Read line segment collision.
				https://www.geeksforgeeks.org/check-if-two-given-line-segments-intersect/
				https://stackoverflow.com/questions/3838329/how-can-i-check-if-two-segments-intersect
				
				Approach w/ list of line segments.  Check playpos if is in each of the line (wall) segments.
				https://stackoverflow.com/questions/328107/how-can-you-determine-a-point-is-between-two-other-points-on-a-line-segment
					Testing:
						Apparently checking if the player's position collides with any of 36,000 wall segments took ~2 milliseconds.
						This 36k figure comes from:
							currentNumberWallSegments = fps * gameTimeInSeconds * numberOfPlayer
							With 60 fps, 300 seconds (5m), and 2 players.
						The nice thing is that increasing the number of players or the game time, increases the execution time only linearly.
							For example if you 16 players and a 10m game, its still only 27ms.
							5m 100 players = 95ms.  So each player adds just under 1ms to the operation
						
						Testing Assumes Players = 100.  This is to obtain more reliable results due to less rounding to the nearest millisecond.
							Point isBetween Segment Approach
								foreach = 83 -> 86
								for loop = 90 -> 109

							Two Segments intersect Approach
								foreach = 100 -> 116

						Notes:  This operation must still be done per player per frame.
						A viable execution time has to be well under: 16.6667ms
						Still optimization is desired so that we arent checking literally ALL wall segments.  Divide them into quadrants or some shit, with a segment per frame they cannot b 
				
	Unity Collision Approaches
		https://answers.unity.com/questions/593293/how-to-add-a-collider-to-a-trail-renderer.html
		Random tron unity dev video w/ scripts: https://www.youtube.com/watch?v=V4mNjjMgsGQ&feature=youtu.be
		Something like dropping a collidable game object at short intervals behind the light cycle as it drives.
		Similar Concept to: https://noobtuts.com/unity/2d-snake-game